/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.RegistrarRole;

import Business.Business;
import Business.Course.CourseOffer;
import Business.Course.CourseEnrollment;
import Business.Profiles.StudentProfile;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;


/**
 *
 * @author Yaksha
 */
public class RegisterStudentJPanel extends javax.swing.JPanel {

    private Business business;
    private JPanel cardPanel;
    private StudentProfile currentStudent;
    private String currentSemester = "Fall 2025";
    
    /**
     * Creates new form RegisterStudentJPanel
     */
    

    public RegisterStudentJPanel() {
        initComponents();
    }

    public void initialize(Business business, JPanel cardPanel) {
        this.business = business;
        this.cardPanel = cardPanel;
        loadAllOffers();
    }
    
    private void loadStudent() {
        String studentId = txtStudentId.getText().trim();
        if (studentId.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Enter Student Person ID");
            return;
        }
        
        currentStudent = business.getStudentDirectory().findStudent(studentId);
        if (currentStudent == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Student not found: " + studentId);
            return;
        }
        
        // Load student's current enrollments
        DefaultTableModel model = (DefaultTableModel) tblStudentEnroll.getModel();
        model.setRowCount(0);
        
        for (CourseEnrollment enrollment : currentStudent.getEnrollments()) {
            if (enrollment.getCourseOffer().getSemester().equals(currentSemester)) {
                model.addRow(new Object[]{
                    enrollment.getCourseOffer().getCourse().getCourseId(),
                    enrollment.getCourseOffer().getCourse().getCourseName(),
                    enrollment.getCourseOffer().getCourse().getCreditHours(),
                    enrollment.getGrade() != null ? enrollment.getGrade() : "In Progress"
                });
            }
        }
        
        loadAllOffers();
    }
    
    private void loadAllOffers() {
        DefaultTableModel model = (DefaultTableModel) tblAllOffers.getModel();
        model.setRowCount(0);
        
        for (CourseOffer offer : business.getCourseOfferDirectory().getCourseOffersBySemester(currentSemester)) {
            model.addRow(new Object[]{
                offer.getCourse().getCourseId(),
                offer.getCourse().getCourseName(),
                offer.getCourse().getCreditHours(),
                offer.getEnrolledCount() + "/" + offer.getCapacity()
            });
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEnroll = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnDrop = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblStudent = new javax.swing.JLabel();
        txtStudentId = new javax.swing.JTextField();
        btnLoadStudent = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudentEnroll = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAllOffers = new javax.swing.JTable();
        lblAllOffers = new javax.swing.JLabel();

        btnEnroll.setText("Enroll Selected Offer");
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });

        lblTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblTitle.setText("Student Registration - Admin Side (Term: â€¦)");

        btnDrop.setText("Drop Selected Offer");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblStudent.setText("Student Person ID");

        btnLoadStudent.setText("Load Student");
        btnLoadStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadStudentActionPerformed(evt);
            }
        });

        tblStudentEnroll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course #", "Course", "Credits", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStudentEnroll);

        tblAllOffers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course #", "Course", "Credits", "Enrolled"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblAllOffers);

        lblAllOffers.setText("All Offers :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(lblStudent)
                                .addGap(34, 34, 34)
                                .addComponent(txtStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnLoadStudent))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAllOffers)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(btnEnroll)
                        .addGap(18, 18, 18)
                        .addComponent(btnDrop)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(btnBack))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudent)
                    .addComponent(txtStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoadStudent))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(lblAllOffers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnroll)
                    .addComponent(btnDrop))
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollActionPerformed
        // TODO add your handling code here:
        if (currentStudent == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Load a student first");
            return;
        }
        
        int row = tblAllOffers.getSelectedRow();
        if (row < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Select an offer");
            return;
        }
        
        String courseId = String.valueOf(tblAllOffers.getValueAt(row, 0));
        
        // Find the course offer
        CourseOffer targetOffer = null;
        for (CourseOffer offer : business.getCourseOfferDirectory().getCourseOffersBySemester(currentSemester)) {
            if (offer.getCourse().getCourseId().equals(courseId)) {
                targetOffer = offer;
                break;
            }
        }
        
        if (targetOffer == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Offer not found");
            return;
        }
        
        if (targetOffer.isFull()) {
            javax.swing.JOptionPane.showMessageDialog(this, "No seats available");
            return;
        }
        
        // Check if already enrolled
        for (CourseEnrollment enrollment : currentStudent.getEnrollments()) {
            if (enrollment.getCourseOffer().equals(targetOffer)) {
                javax.swing.JOptionPane.showMessageDialog(this, "Already enrolled in this course");
                return;
            }
        }
        
        // Create enrollment
        String enrollmentId = "ENR" + System.currentTimeMillis();
        CourseEnrollment enrollment = new CourseEnrollment(enrollmentId, currentStudent, targetOffer);
        currentStudent.addEnrollment(enrollment);
        targetOffer.addEnrollment(enrollment);
        
        // Update student's account balance
        currentStudent.setAccountBalance(currentStudent.getAccountBalance() - enrollment.getTuitionAmount());
        
        javax.swing.JOptionPane.showMessageDialog(this, "Enrolled in " + courseId);
        loadStudent();
    }//GEN-LAST:event_btnEnrollActionPerformed

    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
        // TODO add your handling code here:
        if (currentStudent == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Load a student first");
            return;
        }
        
        int row = tblStudentEnroll.getSelectedRow();
        if (row < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Select the enrollment row to drop");
            return;
        }
        
        String courseId = String.valueOf(tblStudentEnroll.getValueAt(row, 0));
        
        // Find and remove the enrollment
        CourseEnrollment toRemove = null;
        for (CourseEnrollment enrollment : currentStudent.getEnrollments()) {
            if (enrollment.getCourseOffer().getCourse().getCourseId().equals(courseId) &&
                enrollment.getCourseOffer().getSemester().equals(currentSemester)) {
                toRemove = enrollment;
                break;
            }
        }
        
        if (toRemove != null) {
            currentStudent.removeEnrollment(toRemove);
            toRemove.getCourseOffer().removeEnrollment(toRemove);
            
            // Refund if not paid
            if (!toRemove.isTuitionPaid()) {
                currentStudent.setAccountBalance(currentStudent.getAccountBalance() + toRemove.getTuitionAmount());
            }
            
            javax.swing.JOptionPane.showMessageDialog(this, "Dropped " + courseId);
            loadStudent();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Enrollment not found");
        }
    }//GEN-LAST:event_btnDropActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        ((CardLayout)cardPanel.getLayout()).show(cardPanel, "workarea");
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnLoadStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadStudentActionPerformed
        // TODO add your handling code here:
        loadStudent();
    }//GEN-LAST:event_btnLoadStudentActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JButton btnLoadStudent;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAllOffers;
    private javax.swing.JLabel lblStudent;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblAllOffers;
    private javax.swing.JTable tblStudentEnroll;
    private javax.swing.JTextField txtStudentId;
    // End of variables declaration//GEN-END:variables
}
