/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.StudentRole;

import Business.Course.CourseEnrollment;
import Business.Profiles.StudentProfile;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author grace
 */
public class TranscriptJPanel extends javax.swing.JPanel {
    private StudentProfile studentProfile;

    /**
     * Creates new form TranscriptJPanel
     */
    public TranscriptJPanel(StudentProfile student) {
        initComponents();
        this.studentProfile = student;
    
    // Setup combo box listener
    cmbSemester.addActionListener(e -> filterBySemester());
    
    refreshPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblSemester = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTranscript = new javax.swing.JTable();
        lblTermGPA = new javax.swing.JLabel();
        lblOverallGPA = new javax.swing.JLabel();
        lblAcademicStanding = new javax.swing.JLabel();
        lblAccessWarning = new javax.swing.JLabel();

        jLabel1.setText("TRANSCRIPT INFORMATION");

        lblSemester.setText("Select Semester");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Semesters", "Spring 2025", "Fall 2025", "Winter 2026" }));

        tblTranscript.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Term", "Course ID", "Course Name", "Credits", "Grade", "Academic Standing"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTranscript);

        lblTermGPA.setText("Term GPA: ");

        lblOverallGPA.setText("Overall GPA:");

        lblAcademicStanding.setText("Academic Standing:");

        lblAccessWarning.setText("Access Warning:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(268, 268, 268)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAccessWarning)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblSemester)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(lblTermGPA)
                .addGap(154, 154, 154)
                .addComponent(lblOverallGPA)
                .addGap(130, 130, 130)
                .addComponent(lblAcademicStanding)
                .addContainerGap(110, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSemester)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(lblAccessWarning)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTermGPA)
                    .addComponent(lblOverallGPA)
                    .addComponent(lblAcademicStanding))
                .addContainerGap(105, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAcademicStanding;
    private javax.swing.JLabel lblAccessWarning;
    private javax.swing.JLabel lblOverallGPA;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblTermGPA;
    private javax.swing.JTable tblTranscript;
    // End of variables declaration//GEN-END:variables

    public void refreshPanel() {
    filterBySemester();
    }

    private void filterBySemester() {
 if (!studentProfile.canAccessTranscript()) {
        // BLOCK ACCESS - Tuition not paid!
        DefaultTableModel model = (DefaultTableModel) tblTranscript.getModel();
        model.setRowCount(0);
        
        lblAccessWarning.setText("âš  Please pay tuition to view transcript");
        lblAccessWarning.setVisible(true);
        
        lblTermGPA.setText("Term GPA: --");
        lblOverallGPA.setText("Overall GPA: --");
        lblAcademicStanding.setText("Academic Standing: --");
        
        return;
    }
    
    // Tuition is paid - show transcript
    lblAccessWarning.setVisible(false);
    
    String selectedSemester = (String) 
            cmbSemester.getSelectedItem();
    loadTranscriptData(selectedSemester);    }

    private void loadTranscriptData(String selectedSemester) {
    DefaultTableModel model = (DefaultTableModel) tblTranscript.getModel();
    model.setRowCount(0);
    
    ArrayList<CourseEnrollment> enrollments;
    
    if (selectedSemester.equals("All Semesters")) {
        enrollments = studentProfile.getEnrollments();
    } else {
        enrollments = getEnrollmentsBySemester(selectedSemester);
    }
    
    // Populate table
    for (CourseEnrollment e : enrollments) {
        String term = e.getCourseOffer().getSemester();
        String courseId = e.getCourseOffer().getCourse().getCourseId();
        String courseName = e.getCourseOffer().getCourse().getCourseName();
        int credits = e.getCourseOffer().getCourse().getCreditHours();
        String grade = e.getGrade() != null ? e.getGrade() : "In Progress";
        String standing = determineStandingForSemester(e.getCourseOffer().getSemester());
        
        Object[] row = {term, courseId, courseName, credits, grade, standing};
        model.addRow(row);
    }
    
    // Update GPA labels
    updateGPALabels(selectedSemester);
}

private ArrayList<CourseEnrollment> getEnrollmentsBySemester(String semester) {
    ArrayList<CourseEnrollment> filtered = new ArrayList<>();
    for (CourseEnrollment e : studentProfile.getEnrollments()) {
        if (e.getCourseOffer().getSemester().equals(semester)) {
            filtered.add(e);
        }
    }
    return filtered;
}

private String determineStandingForSemester(String semester) {
    double termGPA = studentProfile.getTermGPA(semester);
    double overallGPA = studentProfile.getOverallGPA();
    
    // Per assignment rules:
    if (overallGPA < 3.0) {
        return "Academic Probation";
    } else if (termGPA < 3.0) {
        return "Academic Warning";
    } else {
        return "Good Standing";
    }
}

private void updateGPALabels(String semester) {
    if (!semester.equals("All Semesters")) {
        double termGPA = studentProfile.getTermGPA(semester);
        lblTermGPA.setText(String.format("Term GPA: %.2f", termGPA));
    } else {
        lblTermGPA.setText("Term GPA: (Select semester)");
    }
    
    double overallGPA = studentProfile.getOverallGPA();
    lblOverallGPA.setText(String.format("Overall GPA: %.2f", overallGPA));
    
    // Update academic status
    studentProfile.updateAcademicStatus();
    String standing = studentProfile.getAcademicStatus();
    lblAcademicStanding.setText("Academic Standing: " + standing);
    
    // Color code
    if (standing.contains("Good")) {
        lblAcademicStanding.setForeground(new java.awt.Color(39, 174, 96)); // Green
    } else if (standing.contains("Warning")) {
        lblAcademicStanding.setForeground(new java.awt.Color(243, 156, 18)); // Orange
    } else {
        lblAcademicStanding.setForeground(new java.awt.Color(231, 76, 60)); // Red
    }
}
}
