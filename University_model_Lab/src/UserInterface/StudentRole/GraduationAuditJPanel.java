/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.StudentRole;

import Business.Course.CourseEnrollment;
import Business.Profiles.StudentProfile;

/**
 *
 * @author grace
 */
public class GraduationAuditJPanel extends javax.swing.JPanel {
        private StudentProfile studentProfile;

    /**
     * Creates new form GracuationJPanel
     */
    public GraduationAuditJPanel(StudentProfile student) {
        initComponents();
         this.studentProfile = student;
        refreshPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblEligibilityStatus = new javax.swing.JLabel();
        lblTotalCredits = new javax.swing.JLabel();
        lblCoreStatus = new javax.swing.JLabel();
        lblRemaining = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAuditReport = new javax.swing.JTextArea();
        lblTitle = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();

        lblEligibilityStatus.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        lblEligibilityStatus.setText("                READY TO GRADUATE !");

        lblTotalCredits.setText("Total Credits:");

        lblCoreStatus.setText("Core Requirements:");

        lblRemaining.setText("Credits Remaining:");

        txtAuditReport.setColumns(20);
        txtAuditReport.setRows(5);
        jScrollPane1.setViewportView(txtAuditReport);

        lblTitle.setFont(new java.awt.Font("Segoe UI Semibold", 1, 16)); // NOI18N
        lblTitle.setText("GRADUATION AUDIT");

        btnRefresh.setText("Refresh Audit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCoreStatus)
                            .addComponent(lblTotalCredits)
                            .addComponent(lblRemaining)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(lblEligibilityStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnRefresh)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEligibilityStatus)
                .addGap(18, 18, 18)
                .addComponent(lblTotalCredits)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCoreStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblRemaining)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCoreStatus;
    private javax.swing.JLabel lblEligibilityStatus;
    private javax.swing.JLabel lblRemaining;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalCredits;
    private javax.swing.JTextArea txtAuditReport;
    // End of variables declaration//GEN-END:variables

    public void refreshPanel() {
    updateGraduationStatus();
    }

    private void updateGraduationStatus() {
  // Get graduation data
    int totalCredits = studentProfile.getTotalCreditsEarned();
    boolean isEligible = studentProfile.isReadyToGraduate();
    int remaining = 32 - totalCredits;
    if (remaining < 0) remaining = 0;
    
    // Check INFO 5100
    boolean hasCore = checkCoreRequirement();
    
    // Update eligibility status
    if (isEligible) {
        lblEligibilityStatus.setText("✓✓✓ READY TO GRADUATE ✓✓✓");
        lblEligibilityStatus.setForeground(new java.awt.Color(39, 174, 96)); // Green
    } else {
        lblEligibilityStatus.setText("NOT READY TO GRADUATE");
        lblEligibilityStatus.setForeground(new java.awt.Color(231, 76, 60)); // Red
    }
    
    // Update credits
    lblTotalCredits.setText(String.format("Total Credits: %d/32", totalCredits));
    if (totalCredits >= 32) {
        lblTotalCredits.setForeground(new java.awt.Color(39, 174, 96));
    }
    
    // Update core status
    if (hasCore) {
        lblCoreStatus.setText("Core Requirement (INFO 5100): ✓ Complete");
        lblCoreStatus.setForeground(new java.awt.Color(39, 174, 96));
    } else {
        lblCoreStatus.setText("Core Requirement (INFO 5100): ✗ Not Complete");
        lblCoreStatus.setForeground(new java.awt.Color(231, 76, 60));
    }
    
    // Update remaining
    lblRemaining.setText(String.format("Credits Remaining: %d", remaining));
    
    // Generate detailed report
    generateAuditReport();    }

    private boolean checkCoreRequirement() {
for (CourseEnrollment e : studentProfile.getEnrollments()) {
        if (e.getCourseOffer().getCourse().getCourseId().equals("INFO 5100") 
            && e.getGrade() != null && !e.getGrade().equals("F")) {
            return true;
        }
    }
    return false;    }

    private void generateAuditReport() {
StringBuilder report = new StringBuilder();
    
    report.append("========== GRADUATION AUDIT REPORT ==========\n\n");
    report.append("Student ID: ").append(studentProfile.getPerson().getPersonId()).append("\n");
    report.append("Student Name: ").append(studentProfile.getPerson().getFullName()).append("\n");
    report.append("Program: MSIS (Master of Science in Information Systems)\n\n");
    
    int totalCredits = studentProfile.getTotalCreditsEarned();
    report.append("CREDIT REQUIREMENTS:\n");
    report.append(String.format("  Credits Earned: %d\n", totalCredits));
    report.append("  Credits Required: 32\n");
    report.append(String.format("  Status: %s\n\n", 
        totalCredits >= 32 ? "✓ Complete" : "✗ Need " + (32 - totalCredits) + " more"));
    
    boolean hasCore = checkCoreRequirement();
    report.append("CORE COURSE REQUIREMENT:\n");
    report.append("  INFO 5100 (4 credits) - Application Engineering\n");
    report.append(String.format("  Status: %s\n\n", hasCore ? "✓ Complete" : "✗ Not Complete"));
    
    double gpa = studentProfile.getOverallGPA();
    report.append("ACADEMIC STANDING:\n");
    report.append(String.format("  Overall GPA: %.2f\n", gpa));
    report.append(String.format("  Status: %s\n\n", studentProfile.getAcademicStatus()));
    
    boolean eligible = studentProfile.isReadyToGraduate();
    report.append("GRADUATION ELIGIBILITY:\n");
    if (eligible) {
        report.append("  ✓✓✓ READY TO GRADUATE ✓✓✓\n");
        report.append("  All requirements have been met.\n");
    } else {
        report.append("  NOT READY TO GRADUATE\n");
        report.append("  Please complete outstanding requirements.\n");
    }
    
    report.append("\n=============================================");
    
    txtAuditReport.setText(report.toString());    }
}
