/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.StudentRole;

import Business.Course.CourseEnrollment;
import Business.Course.CourseOffer;
import Business.Course.CourseOfferDirectory;
import Business.Profiles.StudentProfile;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author grace
 */
public class CourseRegistrationJPanel extends javax.swing.JPanel {
    private StudentProfile studentProfile;
    private CourseOfferDirectory courseOfferDirectory;
    private String currentSemester = "Fall2025";
    /**
     * Creates new form CourseRegistrationJPanel
     */
    public CourseRegistrationJPanel(StudentProfile student, CourseOfferDirectory directory, String semester) {
        initComponents();
        this.studentProfile = student;
    this.courseOfferDirectory = directory;
    this.currentSemester = semester;
    
    loadAllCourses();
    loadEnrolledCourses();
    updateCreditsLabel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lblCourseID = new javax.swing.JLabel();
        lblDropCourse = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        EnrolledCoursesJTable = new javax.swing.JTable();
        btnApply = new javax.swing.JButton();
        txtInstructor = new javax.swing.JTextField();
        btnSearchCourseName = new javax.swing.JButton();
        txtCourseName = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        CoursesJTable = new javax.swing.JTable();
        btnSearchInstructor = new javax.swing.JButton();
        lblInstructor = new javax.swing.JLabel();
        lblCourseName = new javax.swing.JLabel();
        btnSearchCourseID = new javax.swing.JButton();
        txtCourseID = new javax.swing.JTextField();
        btnEnroll = new javax.swing.JButton();

        lblCourseID.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCourseID.setText("Course ID:");

        lblDropCourse.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        lblDropCourse.setText("Drop a Course ");

        EnrolledCoursesJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Instructor", "Credits", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(EnrolledCoursesJTable);

        btnApply.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        txtInstructor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInstructorActionPerformed(evt);
            }
        });

        btnSearchCourseName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearchCourseName.setText("Search");
        btnSearchCourseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCourseNameActionPerformed(evt);
            }
        });

        CoursesJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Instructor", "Credits", "Schedule", "Location", "Available Seats"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(CoursesJTable);

        btnSearchInstructor.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearchInstructor.setText("Search");
        btnSearchInstructor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchInstructorActionPerformed(evt);
            }
        });

        lblInstructor.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblInstructor.setText("Instructor");

        lblCourseName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCourseName.setText("Course Name:");

        btnSearchCourseID.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearchCourseID.setText("Search");
        btnSearchCourseID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCourseIDActionPerformed(evt);
            }
        });

        btnEnroll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEnroll.setText("Enroll");
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblCourseID)
                                .addComponent(lblInstructor)
                                .addComponent(lblCourseName))
                            .addGap(26, 26, 26)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtCourseName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtInstructor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                                .addComponent(txtCourseID, javax.swing.GroupLayout.Alignment.LEADING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnSearchCourseID)
                                .addComponent(btnSearchInstructor)
                                .addComponent(btnSearchCourseName))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 404, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(10, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(lblDropCourse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEnroll)
                .addGap(40, 40, 40))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnApply)
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseID)
                    .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchCourseID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInstructor)
                    .addComponent(txtInstructor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchInstructor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCourseName)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchCourseName)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnEnroll)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblDropCourse)
                        .addGap(7, 7, 7)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApply)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        mainScrollPane.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        // TODO add your handling code here:
        int selectedRow = EnrolledCoursesJTable.getSelectedRow();
    
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, 
            "Please select a course from the Enrolled Courses table to drop");
        return;
    }
    
    // Get course ID from table
    String courseId = (String) EnrolledCoursesJTable.getValueAt(selectedRow, 0);
    String courseName = (String) EnrolledCoursesJTable.getValueAt(selectedRow, 1);
    
    // Confirm
    int confirm = JOptionPane.showConfirmDialog(this, 
        "Drop " + courseId + " - " + courseName + "?\n\nTuition will be refunded.", 
        "Confirm Drop", 
        JOptionPane.YES_NO_OPTION);
    
    if (confirm != JOptionPane.YES_OPTION) return;
    
    // Find enrollment
    CourseEnrollment toRemove = null;
    for (CourseEnrollment e : studentProfile.getEnrollments()) {
        if (e.getCourseOffer().getCourse().getCourseId().equals(courseId) &&
            e.getCourseOffer().getSemester().equals(currentSemester)) {
            toRemove = e;
            break;
        }
    }
    
    if (toRemove != null) {
        // Refund tuition
        double refund = toRemove.getTuitionAmount();
        studentProfile.setAccountBalance(studentProfile.getAccountBalance() + refund);
        
        studentProfile.recordRefund(refund, courseId);  // Record refund in history

        // Remove enrollment
        studentProfile.removeEnrollment(toRemove);
        toRemove.getCourseOffer().removeEnrollment(toRemove);
        
        JOptionPane.showMessageDialog(this, 
            "Course dropped!\nRefund: $" + String.format("%.2f", refund));
        
        // Refresh everything
        loadEnrolledCourses();
        updateCreditsLabel();
    
}
    }//GEN-LAST:event_btnApplyActionPerformed

    private void txtInstructorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInstructorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInstructorActionPerformed

    private void btnSearchCourseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCourseNameActionPerformed
        // TODO add your handling code here:
        String courseName = txtCourseName.getText().trim();

        if (courseName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter course name");
            return;
        }

        ArrayList<CourseOffer> results = courseOfferDirectory.searchByCourseName(courseName, currentSemester);
        populateCoursesTable(results);
    }//GEN-LAST:event_btnSearchCourseNameActionPerformed

    private void btnSearchInstructorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchInstructorActionPerformed
        // TODO add your handling code here:
        String instructor = txtInstructor.getText().trim();

        if (instructor.isEmpty()) {
            loadAllCourses(); // Show all if empty
            return;
        }

        ArrayList<CourseOffer> results = courseOfferDirectory.searchByTeacher(instructor, currentSemester);

        if (results.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No courses found for instructor: " + instructor);
            loadAllCourses(); // Show all courses again
        } else {
            populateCoursesTable(results);
        }
    }//GEN-LAST:event_btnSearchInstructorActionPerformed

    private void btnSearchCourseIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCourseIDActionPerformed
        // TODO add your handling code here:
        String courseId = txtCourseID.getText().trim();

        if (courseId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Course ID");
            return;
        }

        ArrayList<CourseOffer> results = courseOfferDirectory.searchByCourseId(courseId, currentSemester);
        populateCoursesTable(results);
    }//GEN-LAST:event_btnSearchCourseIDActionPerformed

    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollActionPerformed
        // TODO add your handling code here:
        int selectedRow = CoursesJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a course");
            return;
        }

        // Check 8 credit limit
        int currentCredits = studentProfile.getCurrentSemesterCredits(currentSemester);
        String courseId = (String) CoursesJTable.getValueAt(selectedRow, 0);
        CourseOffer offer = findCourseOffer(courseId);

        if (offer == null) return;

        int courseCredits = offer.getCourse().getCreditHours();

        if (currentCredits + courseCredits > 8) {
            JOptionPane.showMessageDialog(this,
                "Cannot enroll: Would exceed 8 credit limit!\nCurrent: " + currentCredits +
                "\nCourse: " + courseCredits);
            return;
        }

        // Check enrollment open
        if (!offer.isEnrollmentOpen()) {
            JOptionPane.showMessageDialog(this, "Enrollment is closed for this course");
            return;
        }

        // Check capacity
        if (offer.isFull()) {
            JOptionPane.showMessageDialog(this, "Course is full");
            return;
        }

        // Create enrollment
        CourseEnrollment enrollment = new CourseEnrollment(
            "E" + System.currentTimeMillis(),
            studentProfile,
            offer
        );

        studentProfile.addEnrollment(enrollment);
        offer.addEnrollment(enrollment);

        // Charge tuition
        double tuition = offer.getCourse().getCreditHours() * 1500.0; 
        studentProfile.setAccountBalance(studentProfile.getAccountBalance() - tuition);
        enrollment.setTuitionAmount(tuition);

        JOptionPane.showMessageDialog(this, "Successfully enrolled!");

        loadEnrolledCourses();
        updateCreditsLabel();
        }

        private CourseOffer findCourseOffer(String courseId) {
            for (CourseOffer offer : courseOfferDirectory.getCourseOffersBySemester(currentSemester)) {
                if (offer.getCourse().getCourseId().equals(courseId)) {
                    return offer;
                }
            }
            return null;
    }//GEN-LAST:event_btnEnrollActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CoursesJTable;
    private javax.swing.JTable EnrolledCoursesJTable;
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JButton btnSearchCourseID;
    private javax.swing.JButton btnSearchCourseName;
    private javax.swing.JButton btnSearchInstructor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblCourseID;
    private javax.swing.JLabel lblCourseName;
    private javax.swing.JLabel lblDropCourse;
    private javax.swing.JLabel lblInstructor;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JTextField txtCourseID;
    private javax.swing.JTextField txtCourseName;
    private javax.swing.JTextField txtInstructor;
    // End of variables declaration//GEN-END:variables

    private void loadAllCourses() {
    DefaultTableModel model = (DefaultTableModel) CoursesJTable.getModel();
    model.setRowCount(0);
    
    ArrayList<CourseOffer> offers = courseOfferDirectory.getCourseOffersBySemester(currentSemester);
    populateCoursesTable(offers);    }

    private void loadEnrolledCourses() {
 DefaultTableModel model = (DefaultTableModel) EnrolledCoursesJTable.getModel();
    model.setRowCount(0);
    
    ArrayList<CourseEnrollment> enrollments = studentProfile.getEnrollments();
    
    for (CourseEnrollment e : enrollments) {
        if (e.getCourseOffer().getSemester().equals(currentSemester)) {
            CourseOffer offer = e.getCourseOffer();
            String instructorName = offer.getAssignedFaculty() != null ? 
                offer.getAssignedFaculty().getPerson().getFullName() : "TBA";
            
            Object[] row = {
                offer.getCourse().getCourseId(),
                offer.getCourse().getCourseName(),
                instructorName,
                offer.getCourse().getCreditHours(),
                offer.getRoomLocation() != null ? offer.getRoomLocation() : "TBA"
            };
            model.addRow(row);
        }
    }    }

    private void updateCreditsLabel() {
int credits = studentProfile.getCurrentSemesterCredits(currentSemester);
    lblDropCourse.setText("Credits: " + credits + "/8");
    
    if (credits >= 8) {
        lblDropCourse.setForeground(Color.RED);
    }    }

    private void populateCoursesTable(ArrayList<CourseOffer> offers) {
DefaultTableModel model = (DefaultTableModel) CoursesJTable.getModel();
    model.setRowCount(0);
    
    for (CourseOffer offer : offers) {
        String instructorName = offer.getAssignedFaculty() != null ? 
            offer.getAssignedFaculty().getPerson().getFullName() : "TBA";
        
        int availableSeats = offer.getCapacity() - offer.getEnrolledCount();
        
        Object[] row = {
            offer.getCourse().getCourseId(),                                   
            offer.getCourse().getCourseName(),                                  
            instructorName,                                                     
            offer.getCourse().getCreditHours(),                                 
            offer.getSchedule() != null ? offer.getSchedule() : "TBA",         
            offer.getRoomLocation() != null ? offer.getRoomLocation() : "TBA", 
            availableSeats + "/" + offer.getCapacity()                        
        };
        model.addRow(row);
    }
    }
    public void refreshPanel() {
    loadAllCourses();
    loadEnrolledCourses();
    updateCreditsLabel();
}
}
