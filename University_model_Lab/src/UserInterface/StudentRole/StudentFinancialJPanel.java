/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.StudentRole;

import Business.Course.CourseEnrollment;
import Business.Profiles.StudentProfile;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Business.Profiles.PaymentTransaction; 

/**
 *
 * @author grace
 */
public class StudentFinancialJPanel extends javax.swing.JPanel {
        private StudentProfile studentProfile;

    /**
     * Creates new form StudentFinancialJPanel
     */
    public StudentFinancialJPanel(StudentProfile student) {
        initComponents();
          initComponents();
    this.studentProfile = student;
    refreshPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JTextField();
        lblBalance = new javax.swing.JLabel();
        lblBalanceStatus = new javax.swing.JLabel();
        lblPaymentAmount = new javax.swing.JLabel();
        txtPaymentAmount = new javax.swing.JTextField();
        btnPayTuition = new javax.swing.JButton();
        btnPayFull = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUnpaidCourses = new javax.swing.JTable();
        txtBalance = new javax.swing.JTextField();
        txtBalanceStatus = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPaymentHistory = new javax.swing.JTable();

        lblTitle.setFont(new java.awt.Font("Sitka Text", 1, 16)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lblTitle.setText("TUITION PAYMENT");

        lblBalance.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblBalance.setText("Balance :");

        lblBalanceStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblBalanceStatus.setText("Balance Status: ");

        lblPaymentAmount.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPaymentAmount.setText("Payment Amount:$");

        txtPaymentAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPaymentAmountActionPerformed(evt);
            }
        });

        btnPayTuition.setFont(new java.awt.Font("Sitka Text", 1, 13)); // NOI18N
        btnPayTuition.setText("Pay Tuition");
        btnPayTuition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayTuitionActionPerformed(evt);
            }
        });

        btnPayFull.setFont(new java.awt.Font("Sitka Text", 1, 13)); // NOI18N
        btnPayFull.setText("Pay Full Balance");
        btnPayFull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayFullActionPerformed(evt);
            }
        });

        tblUnpaidCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Credits", "Tuition", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUnpaidCourses);

        jLabel1.setText("Payment History");

        tblPaymentHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Course", "Amount", "Balance After", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPaymentHistory);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane2))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblBalance)
                                        .addGap(37, 37, 37)
                                        .addComponent(txtBalance))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblBalanceStatus)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtBalanceStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPaymentAmount)
                                    .addComponent(btnPayTuition))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnPayFull)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtPaymentAmount)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBalance)
                    .addComponent(lblPaymentAmount)
                    .addComponent(txtPaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBalanceStatus)
                        .addComponent(txtBalanceStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPayTuition)
                        .addComponent(btnPayFull)))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtPaymentAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPaymentAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPaymentAmountActionPerformed

    private void btnPayFullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayFullActionPerformed
        // TODO add your handling code here:
        if (studentProfile.getAccountBalance() >= 0) {
    JOptionPane.showMessageDialog(this, 
        "No balance to pay!",
        "No Payment Needed",
        JOptionPane.INFORMATION_MESSAGE);
    return;
}

double owed = studentProfile.getAmountOwed();

int confirm = JOptionPane.showConfirmDialog(this,
    String.format("Pay full balance of $%.2f?", owed),
    "Confirm",
    JOptionPane.YES_NO_OPTION);

if (confirm == JOptionPane.YES_OPTION) {
    studentProfile.makePayment(owed);
    JOptionPane.showMessageDialog(this, "Full balance paid!");
    refreshPanel();
}
    }//GEN-LAST:event_btnPayFullActionPerformed

    private void btnPayTuitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayTuitionActionPerformed
        // TODO add your handling code here:
        String amountText = txtPaymentAmount.getText().trim();

if (amountText.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Please enter payment amount");
    return;
}

try {
    double amount = Double.parseDouble(amountText);
    
    if (amount <= 0) {
        JOptionPane.showMessageDialog(this, "Amount must be positive");
        return;
    }
    
    // Check if balance to pay
    if (studentProfile.getAccountBalance() >= 0) {
        JOptionPane.showMessageDialog(this, 
            "No balance to pay. Your account is paid in full!",
            "No Payment Needed",
            JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    
    // Make payment
    boolean success = studentProfile.makePayment(amount);
    
    if (success) {
        JOptionPane.showMessageDialog(this, 
            String.format("Payment of $%.2f processed!\n\nNew Balance: %s", 
                amount, studentProfile.getBalanceStatus()),
            "Success",
            JOptionPane.INFORMATION_MESSAGE);
        
        txtPaymentAmount.setText("");
        refreshPanel();
    }
    
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter a valid number");
}
    }//GEN-LAST:event_btnPayTuitionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPayFull;
    private javax.swing.JButton btnPayTuition;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblBalanceStatus;
    private javax.swing.JLabel lblPaymentAmount;
    private javax.swing.JTextField lblTitle;
    private javax.swing.JTable tblPaymentHistory;
    private javax.swing.JTable tblUnpaidCourses;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtBalanceStatus;
    private javax.swing.JTextField txtPaymentAmount;
    // End of variables declaration//GEN-END:variables

    public void refreshPanel() {
    updateBalanceDisplay();
    loadUnpaidCourses();
    loadPaymentHistory(); 

    }

    private void updateBalanceDisplay() {
double balance = studentProfile.getAccountBalance();
    
    if (balance < 0) {
        lblBalance.setText(String.format("Balance: -$%.2f", Math.abs(balance)));
        lblBalance.setForeground(java.awt.Color.RED);
        lblBalanceStatus.setText("(Amount Due: $" + String.format("%.2f", Math.abs(balance)) + ")");
        lblBalanceStatus.setForeground(java.awt.Color.RED);
    } else if (balance > 0) {
        lblBalance.setText(String.format("Balance: +$%.2f", balance));
        lblBalance.setForeground(new java.awt.Color(39, 174, 96));
        lblBalanceStatus.setText("(Credit)");
        lblBalanceStatus.setForeground(new java.awt.Color(39, 174, 96));
    } else {
        lblBalance.setText("Balance: $0.00");
        lblBalance.setForeground(new java.awt.Color(39, 174, 96));
        lblBalanceStatus.setText("(Paid in Full)");
        lblBalanceStatus.setForeground(new java.awt.Color(39, 174, 96));
    }
    }

    private void loadUnpaidCourses() {
DefaultTableModel model = (DefaultTableModel) tblUnpaidCourses.getModel();
    model.setRowCount(0);
    
    for (CourseEnrollment e : studentProfile.getEnrollments()) {
        String status = e.isTuitionPaid() ? "✓ PAID" : "✗ UNPAID";
        
        Object[] row = {
            e.getCourseOffer().getCourse().getCourseId(),
            e.getCourseOffer().getCourse().getCourseName(),
            e.getCourseOffer().getCourse().getCreditHours(),
            String.format("$%.2f", e.getTuitionAmount()),
            status  // NEW column
        };
        model.addRow(row);
    }
    }
    
    private void loadPaymentHistory() {
    DefaultTableModel model = (DefaultTableModel) tblPaymentHistory.getModel();
    model.setRowCount(0);
    
    ArrayList<PaymentTransaction> history = studentProfile.getPaymentHistory();
    
    for (PaymentTransaction t : history) {
        // Extract course from description if it exists
        String course = extractCourseFromDescription(t.getDescription());
        
        Object[] row = {
            t.getDate().toString(),
            course,  // ← Changed from "type" to "course"
            t.getFormattedAmount(),
            t.getDescription(),
            t.getFormattedBalance()
        };
        model.addRow(row);
    }
}

private String extractCourseFromDescription(String description) {
    // If description contains "Refund for INFO 5100" → extract "INFO 5100"
    if (description.contains("Refund for ")) {
        return description.replace("Refund for ", "");
    }
    // For general payments
    if (description.contains("Tuition Payment")) {
        return "General Payment";
    }
    return description;
    }

}
