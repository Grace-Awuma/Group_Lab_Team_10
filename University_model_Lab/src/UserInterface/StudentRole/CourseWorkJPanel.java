/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.StudentRole;

import Business.Course.Assignment;
import Business.Course.CourseEnrollment;
import Business.Profiles.StudentProfile;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author grace
 */
public class CourseWorkJPanel extends javax.swing.JPanel {
    private StudentProfile studentProfile;
    private String selectedFile = "";
    /**
     * Creates new form CourseWorkJPanel
     */
    public CourseWorkJPanel(StudentProfile student) {
        initComponents();
        this.studentProfile = student;
        
        loadEnrolledCourses();
        cmbCourses.addActionListener(e -> loadAssignmentsForSelectedCourse());
        
    }
    
   public void refreshPanel() {
    System.out.println("DEBUG: CourseWork refreshPanel() called!");
    System.out.println("DEBUG: Enrollments count = " + studentProfile.getEnrollments().size());
    loadEnrolledCourses();
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbCourses = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAssignments = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtFileName = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();

        jLabel1.setText("My CourseWork");

        jLabel2.setText("Course: ");

        cmbCourses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tblAssignments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Assignment", "Description"
            }
        ));
        jScrollPane2.setViewportView(tblAssignments);

        jLabel3.setText("Submit Assignment");

        txtFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFileNameActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        tblResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblResults);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel2)
                        .addGap(47, 47, 47)
                        .addComponent(cmbCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jLabel3)
                        .addGap(30, 30, 30)
                        .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnBrowse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSubmit))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBrowse)
                        .addComponent(btnSubmit)))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFileNameActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        // 1. Validate file selection
    if (selectedFile.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please select a file first");
        return;
    }
    
    // 2. Validate assignment selection
    int selectedRow = tblAssignments.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select an assignment from the table");
        return;
    }
    
    // 3. Get the selected course
    String selected = (String) cmbCourses.getSelectedItem();
    if (selected == null || selected.equals("-- Select Course --")) {
        JOptionPane.showMessageDialog(this, "Please select a course first");
        return;
    }
    
    // 4. Find the enrollment and assignment
    String courseId = selected.split(" - ")[0].trim();
    CourseEnrollment enrollment = null;
    
    for (CourseEnrollment e : studentProfile.getEnrollments()) {
        if (e.getCourseOffer().getCourse().getCourseId().equals(courseId)) {
            enrollment = e;
            break;
        }
    }
    
    if (enrollment == null) {
        JOptionPane.showMessageDialog(this, "Error: Could not find enrollment");
        return;
    }
    
    // 5. Get the actual Assignment object (not just table data)
    ArrayList<Assignment> assignments = enrollment.getAssignments();
    
    if (selectedRow >= assignments.size()) {
        JOptionPane.showMessageDialog(this, "Error: Invalid assignment selection");
        return;
    }
    
    Assignment assignment = assignments.get(selectedRow);
    
    // 6. Update the ACTUAL Assignment object (this persists!)
    assignment.setSubmissionStatus("Submitted");
    
    // 7. Show success message
    JOptionPane.showMessageDialog(this, 
        "✅ Assignment submitted successfully!\n\n" +
        "Assignment: " + assignment.getTitle() + "\n" +
        "File: " + selectedFile + "\n" +
        "Status: Submitted\n\n" +
        "Waiting for faculty to grade...",
        "Submission Successful",
        JOptionPane.INFORMATION_MESSAGE);
    
    // 8. Refresh the table to show updated status
    loadAssignmentsForSelectedCourse();
    
    // 9. Clear the file selection
    txtFileName.setText("");
    selectedFile = "";
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    int result = fileChooser.showOpenDialog(this);
    
    if (result == JFileChooser.APPROVE_OPTION) {
        selectedFile = fileChooser.getSelectedFile().getName();
        txtFileName.setText(selectedFile);
    }
    }//GEN-LAST:event_btnBrowseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cmbCourses;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblAssignments;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextField txtFileName;
    // End of variables declaration//GEN-END:variables

    private void loadEnrolledCourses() {
cmbCourses.removeAllItems();
        cmbCourses.addItem("-- Select Course --");
        
        for (CourseEnrollment e : studentProfile.getEnrollments()) {
            String courseInfo = e.getCourseOffer().getCourse().getCourseId() + 
                " - " + e.getCourseOffer().getCourse().getCourseName();
            cmbCourses.addItem(courseInfo);
        }    }

    private void loadAssignmentsForSelectedCourse() {
 String selected = (String) cmbCourses.getSelectedItem();
        
        if (selected == null || selected.equals("-- Select Course --")) {
            clearTables();
            return;
        }
        
        // Get course ID from selection
        String courseId = selected.split(" - ")[0].trim();
        
        // Find enrollment
        CourseEnrollment enrollment = null;
        for (CourseEnrollment e : studentProfile.getEnrollments()) {
            if (e.getCourseOffer().getCourse().getCourseId().equals(courseId)) {
                enrollment = e;
                break;
            }
        }
        
        if (enrollment != null) {
            populateAssignmentsTable(enrollment);
            populateResultsTable(enrollment);
        }
    }

    private void populateAssignmentsTable(CourseEnrollment enrollment) {
 DefaultTableModel model = (DefaultTableModel) tblAssignments.getModel();
        model.setRowCount(0);
        
        ArrayList<Assignment> assignments = enrollment.getAssignments();
        
        if (assignments.isEmpty()) {
            Object[] row = {"No assignments yet", "--"};
            model.addRow(row);
        } else {
            for (Assignment a : assignments) {
                Object[] row = {
                    a.getTitle(),
                    a.getDescription()
                };
                model.addRow(row);
            }
        }    }

    private void populateResultsTable(CourseEnrollment enrollment) {
DefaultTableModel model = (DefaultTableModel) tblResults.getModel();
        model.setRowCount(0);
        
        ArrayList<Assignment> assignments = enrollment.getAssignments();
        
        if (assignments.isEmpty()) {
            Object[] row = {"--", "--"};
            model.addRow(row);
        } else {
            for (Assignment a : assignments) {
                String grade = a.getScore() != null ? a.getScore() + "%" : "Not Graded";
                
                Object[] row = {
                    a.getSubmissionStatus(),
                    grade
                };
                model.addRow(row);
            }
        }
    }

    private void clearTables() {
DefaultTableModel model1 = (DefaultTableModel) tblAssignments.getModel();
        model1.setRowCount(0);
        
        DefaultTableModel model2 = (DefaultTableModel) tblResults.getModel();
        model2.setRowCount(0);    }
}
